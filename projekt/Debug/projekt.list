
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002a50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002a50  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b86  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001529  00000000  00000000  00028bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d2  00000000  00000000  0002ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094e0  00000000  00000000  00043662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f208  00000000  00000000  0004cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbd4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018d8  00000000  00000000  000dbd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029c0 	.word	0x080029c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029c0 	.word	0x080029c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa87 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f851 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f939 	bl	80004a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000232:	f000 f907 	bl	8000444 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000236:	f000 f8a9 	bl	800038c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc);
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0x9c>)
 800023c:	0018      	movs	r0, r3
 800023e:	f000 fc1f 	bl	8000a80 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int liczba = 28;
 8000242:	231c      	movs	r3, #28
 8000244:	617b      	str	r3, [r7, #20]
  char buffer[20];

  while (1)
  {

	  if(HAL_ADC_PollForConversion(&hadc, 5)==HAL_OK)
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0x9c>)
 8000248:	2105      	movs	r1, #5
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fc6c 	bl	8000b28 <HAL_ADC_PollForConversion>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d1f8      	bne.n	8000246 <main+0x26>
	  {
		  adc_val = HAL_ADC_GetValue(&hadc);
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x9c>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fcfe 	bl	8000c58 <HAL_ADC_GetValue>
 800025c:	0003      	movs	r3, r0
 800025e:	b29a      	uxth	r2, r3
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <main+0xa0>)
 8000262:	801a      	strh	r2, [r3, #0]
		  liczba = (int)adc_val;
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <main+0xa0>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	617b      	str	r3, [r7, #20]
		  itoa(liczba, buffer, 10);
 800026a:	0039      	movs	r1, r7
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	220a      	movs	r2, #10
 8000270:	0018      	movs	r0, r3
 8000272:	f002 fb59 	bl	8002928 <itoa>
		  if(liczba > 157) {
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	2b9d      	cmp	r3, #157	; 0x9d
 800027a:	dd06      	ble.n	800028a <main+0x6a>
			  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0xa4>)
 800027e:	2201      	movs	r2, #1
 8000280:	2120      	movs	r1, #32
 8000282:	0018      	movs	r0, r3
 8000284:	f001 f8b2 	bl	80013ec <HAL_GPIO_WritePin>
 8000288:	e005      	b.n	8000296 <main+0x76>
		  } else HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0xa4>)
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	0018      	movs	r0, r3
 8000292:	f001 f8ab 	bl	80013ec <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, buffer, (sizeof(buffer)/8) + 1, 1000);
 8000296:	23fa      	movs	r3, #250	; 0xfa
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	0039      	movs	r1, r7
 800029c:	480a      	ldr	r0, [pc, #40]	; (80002c8 <main+0xa8>)
 800029e:	2203      	movs	r2, #3
 80002a0:	f001 ff14 	bl	80020cc <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, " ", 2, 1000);
 80002a4:	23fa      	movs	r3, #250	; 0xfa
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4908      	ldr	r1, [pc, #32]	; (80002cc <main+0xac>)
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <main+0xa8>)
 80002ac:	2202      	movs	r2, #2
 80002ae:	f001 ff0d 	bl	80020cc <HAL_UART_Transmit>
		  HAL_ADC_Start(&hadc);
 80002b2:	4b02      	ldr	r3, [pc, #8]	; (80002bc <main+0x9c>)
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 fbe3 	bl	8000a80 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc, 5)==HAL_OK)
 80002ba:	e7c4      	b.n	8000246 <main+0x26>
 80002bc:	20000028 	.word	0x20000028
 80002c0:	200000ec 	.word	0x200000ec
 80002c4:	48000400 	.word	0x48000400
 80002c8:	20000068 	.word	0x20000068
 80002cc:	080029d8 	.word	0x080029d8

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b099      	sub	sp, #100	; 0x64
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	242c      	movs	r4, #44	; 0x2c
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2334      	movs	r3, #52	; 0x34
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f002 fb25 	bl	8002930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	231c      	movs	r3, #28
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	0018      	movs	r0, r3
 80002ec:	2310      	movs	r3, #16
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fb1d 	bl	8002930 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	231c      	movs	r3, #28
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fb16 	bl	8002930 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2212      	movs	r2, #18
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2201      	movs	r2, #1
 8000316:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2210      	movs	r2, #16
 800031c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2210      	movs	r2, #16
 8000322:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	187b      	adds	r3, r7, r1
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f87b 	bl	8001428 <HAL_RCC_OscConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000336:	f000 f8fd 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	211c      	movs	r1, #28
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2207      	movs	r2, #7
 8000340:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2100      	movs	r1, #0
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fbeb 	bl	8001b34 <HAL_RCC_ClockConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000362:	f000 f8e7 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000366:	003b      	movs	r3, r7
 8000368:	2202      	movs	r2, #2
 800036a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800036c:	003b      	movs	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000372:	003b      	movs	r3, r7
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fd57 	bl	8001e28 <HAL_RCCEx_PeriphCLKConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800037e:	f000 f8d9 	bl	8000534 <Error_Handler>
  }
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b019      	add	sp, #100	; 0x64
 8000388:	bd90      	pop	{r4, r7, pc}
	...

0800038c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	230c      	movs	r3, #12
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f002 fac8 	bl	8002930 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_ADC_Init+0xb0>)
 80003a2:	4a27      	ldr	r2, [pc, #156]	; (8000440 <MX_ADC_Init+0xb4>)
 80003a4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003a6:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_ADC_Init+0xb0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_ADC_Init+0xb0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <MX_ADC_Init+0xb0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <MX_ADC_Init+0xb0>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003be:	4b1f      	ldr	r3, [pc, #124]	; (800043c <MX_ADC_Init+0xb0>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003c4:	4b1d      	ldr	r3, [pc, #116]	; (800043c <MX_ADC_Init+0xb0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ca:	4b1c      	ldr	r3, [pc, #112]	; (800043c <MX_ADC_Init+0xb0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_ADC_Init+0xb0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <MX_ADC_Init+0xb0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <MX_ADC_Init+0xb0>)
 80003de:	22c2      	movs	r2, #194	; 0xc2
 80003e0:	32ff      	adds	r2, #255	; 0xff
 80003e2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_ADC_Init+0xb0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_ADC_Init+0xb0>)
 80003ec:	2224      	movs	r2, #36	; 0x24
 80003ee:	2100      	movs	r1, #0
 80003f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_ADC_Init+0xb0>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_ADC_Init+0xb0>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fa00 	bl	8000800 <HAL_ADC_Init>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000404:	f000 f896 	bl	8000534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2205      	movs	r2, #5
 800040c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	0152      	lsls	r2, r2, #5
 8000414:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	0552      	lsls	r2, r2, #21
 800041c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800041e:	1d3a      	adds	r2, r7, #4
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_ADC_Init+0xb0>)
 8000422:	0011      	movs	r1, r2
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fc23 	bl	8000c70 <HAL_ADC_ConfigChannel>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800042e:	f000 f881 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b004      	add	sp, #16
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	20000028 	.word	0x20000028
 8000440:	40012400 	.word	0x40012400

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	2296      	movs	r2, #150	; 0x96
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fdcb 	bl	8002024 <HAL_UART_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f84f 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000068 	.word	0x20000068
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f002 fa3b 	bl	8002930 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_GPIO_Init+0x88>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_GPIO_Init+0x88>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0289      	lsls	r1, r1, #10
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_GPIO_Init+0x88>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	029b      	lsls	r3, r3, #10
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_GPIO_Init+0x88>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_GPIO_Init+0x88>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	02c9      	lsls	r1, r1, #11
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_GPIO_Init+0x88>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	02db      	lsls	r3, r3, #11
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_GPIO_Init+0x8c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 ff77 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2220      	movs	r2, #32
 8000504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000518:	187b      	adds	r3, r7, r1
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <MX_GPIO_Init+0x8c>)
 800051c:	0019      	movs	r1, r3
 800051e:	0010      	movs	r0, r2
 8000520:	f000 fdec 	bl	80010fc <HAL_GPIO_Init>

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b009      	add	sp, #36	; 0x24
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	48000400 	.word	0x48000400

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x44>)
 8000548:	699a      	ldr	r2, [r3, #24]
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_MspInit+0x44>)
 800054c:	2101      	movs	r1, #1
 800054e:	430a      	orrs	r2, r1
 8000550:	619a      	str	r2, [r3, #24]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x44>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	2201      	movs	r2, #1
 8000558:	4013      	ands	r3, r2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_MspInit+0x44>)
 8000560:	69da      	ldr	r2, [r3, #28]
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_MspInit+0x44>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0549      	lsls	r1, r1, #21
 8000568:	430a      	orrs	r2, r1
 800056a:	61da      	str	r2, [r3, #28]
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_MspInit+0x44>)
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	055b      	lsls	r3, r3, #21
 8000574:	4013      	ands	r3, r2
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b08b      	sub	sp, #44	; 0x2c
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	2414      	movs	r4, #20
 8000592:	193b      	adds	r3, r7, r4
 8000594:	0018      	movs	r0, r3
 8000596:	2314      	movs	r3, #20
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 f9c8 	bl	8002930 <memset>
  if(hadc->Instance==ADC1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <HAL_ADC_MspInit+0x84>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d12b      	bne.n	8000602 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_ADC_MspInit+0x88>)
 80005ac:	699a      	ldr	r2, [r3, #24]
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_ADC_MspInit+0x88>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0089      	lsls	r1, r1, #2
 80005b4:	430a      	orrs	r2, r1
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_ADC_MspInit+0x88>)
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4013      	ands	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_ADC_MspInit+0x88>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_ADC_MspInit+0x88>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0289      	lsls	r1, r1, #10
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_ADC_MspInit+0x88>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	029b      	lsls	r3, r3, #10
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2220      	movs	r2, #32
 80005e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2203      	movs	r2, #3
 80005ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	193a      	adds	r2, r7, r4
 80005f6:	2390      	movs	r3, #144	; 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fd7d 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b00b      	add	sp, #44	; 0x2c
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40012400 	.word	0x40012400
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b08b      	sub	sp, #44	; 0x2c
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	2414      	movs	r4, #20
 800061e:	193b      	adds	r3, r7, r4
 8000620:	0018      	movs	r0, r3
 8000622:	2314      	movs	r3, #20
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f002 f982 	bl	8002930 <memset>
  if(huart->Instance==USART2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d132      	bne.n	800069c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_UART_MspInit+0x94>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0289      	lsls	r1, r1, #10
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	029b      	lsls	r3, r3, #10
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800066e:	0021      	movs	r1, r4
 8000670:	187b      	adds	r3, r7, r1
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2203      	movs	r2, #3
 8000686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2201      	movs	r2, #1
 800068c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	187a      	adds	r2, r7, r1
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fd30 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b00b      	add	sp, #44	; 0x2c
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40021000 	.word	0x40021000

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f87a 	bl	80007c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490e      	ldr	r1, [pc, #56]	; (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0b      	ldr	r4, [pc, #44]	; (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800070e:	f7ff ffe4 	bl	80006da <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000712:	f002 f8cd 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fd83 	bl	8000220 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000728:	08002a44 	.word	0x08002a44
  ldr r2, =_sbss
 800072c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000730:	200000f4 	.word	0x200000f4

08000734 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_COMP_IRQHandler>
	...

08000738 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <HAL_Init+0x24>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_Init+0x24>)
 8000742:	2110      	movs	r1, #16
 8000744:	430a      	orrs	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f809 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074e:	f7ff fef7 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_InitTick+0x5c>)
 800076a:	681c      	ldr	r4, [r3, #0]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_InitTick+0x60>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	0019      	movs	r1, r3
 8000772:	23fa      	movs	r3, #250	; 0xfa
 8000774:	0098      	lsls	r0, r3, #2
 8000776:	f7ff fcc7 	bl	8000108 <__udivsi3>
 800077a:	0003      	movs	r3, r0
 800077c:	0019      	movs	r1, r3
 800077e:	0020      	movs	r0, r4
 8000780:	f7ff fcc2 	bl	8000108 <__udivsi3>
 8000784:	0003      	movs	r3, r0
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fcab 	bl	80010e2 <HAL_SYSTICK_Config>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000790:	2301      	movs	r3, #1
 8000792:	e00f      	b.n	80007b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b03      	cmp	r3, #3
 8000798:	d80b      	bhi.n	80007b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	2301      	movs	r3, #1
 800079e:	425b      	negs	r3, r3
 80007a0:	2200      	movs	r2, #0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fc88 	bl	80010b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_InitTick+0x64>)
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e000      	b.n	80007b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b003      	add	sp, #12
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x1c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	001a      	movs	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x20>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	18d2      	adds	r2, r2, r3
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_IncTick+0x20>)
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	20000008 	.word	0x20000008
 80007e8:	200000f0 	.word	0x200000f0

080007ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <HAL_GetTick+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	200000f0 	.word	0x200000f0

08000800 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e125      	b.n	8000a6a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10a      	bne.n	800083c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fea6 	bl	8000588 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000840:	2210      	movs	r2, #16
 8000842:	4013      	ands	r3, r2
 8000844:	d000      	beq.n	8000848 <HAL_ADC_Init+0x48>
 8000846:	e103      	b.n	8000a50 <HAL_ADC_Init+0x250>
 8000848:	230f      	movs	r3, #15
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d000      	beq.n	8000854 <HAL_ADC_Init+0x54>
 8000852:	e0fd      	b.n	8000a50 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2204      	movs	r2, #4
 800085c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800085e:	d000      	beq.n	8000862 <HAL_ADC_Init+0x62>
 8000860:	e0f6      	b.n	8000a50 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000866:	4a83      	ldr	r2, [pc, #524]	; (8000a74 <HAL_ADC_Init+0x274>)
 8000868:	4013      	ands	r3, r2
 800086a:	2202      	movs	r2, #2
 800086c:	431a      	orrs	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	2203      	movs	r2, #3
 800087a:	4013      	ands	r3, r2
 800087c:	2b01      	cmp	r3, #1
 800087e:	d112      	bne.n	80008a6 <HAL_ADC_Init+0xa6>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	2b01      	cmp	r3, #1
 800088c:	d009      	beq.n	80008a2 <HAL_ADC_Init+0xa2>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	401a      	ands	r2, r3
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	429a      	cmp	r2, r3
 80008a0:	d101      	bne.n	80008a6 <HAL_ADC_Init+0xa6>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <HAL_ADC_Init+0xa8>
 80008a6:	2300      	movs	r3, #0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d116      	bne.n	80008da <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	2218      	movs	r2, #24
 80008b4:	4393      	bics	r3, r2
 80008b6:	0019      	movs	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	430a      	orrs	r2, r1
 80008c2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	0899      	lsrs	r1, r3, #2
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4964      	ldr	r1, [pc, #400]	; (8000a78 <HAL_ADC_Init+0x278>)
 80008e6:	400a      	ands	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7e1b      	ldrb	r3, [r3, #24]
 80008ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7e5b      	ldrb	r3, [r3, #25]
 80008f4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7e9b      	ldrb	r3, [r3, #26]
 80008fc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80008fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	2b01      	cmp	r3, #1
 8000906:	d002      	beq.n	800090e <HAL_ADC_Init+0x10e>
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	015b      	lsls	r3, r3, #5
 800090c:	e000      	b.n	8000910 <HAL_ADC_Init+0x110>
 800090e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000910:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000916:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d101      	bne.n	8000924 <HAL_ADC_Init+0x124>
 8000920:	2304      	movs	r3, #4
 8000922:	e000      	b.n	8000926 <HAL_ADC_Init+0x126>
 8000924:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000926:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2124      	movs	r1, #36	; 0x24
 800092c:	5c5b      	ldrb	r3, [r3, r1]
 800092e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000930:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	4313      	orrs	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7edb      	ldrb	r3, [r3, #27]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d115      	bne.n	800096c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7e9b      	ldrb	r3, [r3, #26]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d105      	bne.n	8000954 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	0252      	lsls	r2, r2, #9
 800094e:	4313      	orrs	r3, r2
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	e00b      	b.n	800096c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000958:	2220      	movs	r2, #32
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000964:	2201      	movs	r2, #1
 8000966:	431a      	orrs	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	23c2      	movs	r3, #194	; 0xc2
 8000972:	33ff      	adds	r3, #255	; 0xff
 8000974:	429a      	cmp	r2, r3
 8000976:	d007      	beq.n	8000988 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000980:	4313      	orrs	r3, r2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4313      	orrs	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	68d9      	ldr	r1, [r3, #12]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	430a      	orrs	r2, r1
 8000996:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	055b      	lsls	r3, r3, #21
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d01b      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d017      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d013      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d00f      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d00b      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	d007      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d003      	beq.n	80009dc <HAL_ADC_Init+0x1dc>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d112      	bne.n	8000a02 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2107      	movs	r1, #7
 80009e8:	438a      	bics	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6959      	ldr	r1, [r3, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	2207      	movs	r2, #7
 80009f8:	401a      	ands	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_ADC_Init+0x27c>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d10b      	bne.n	8000a2a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4393      	bics	r3, r2
 8000a20:	2201      	movs	r2, #1
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a28:	e01c      	b.n	8000a64 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a2e:	2212      	movs	r2, #18
 8000a30:	4393      	bics	r3, r2
 8000a32:	2210      	movs	r2, #16
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3e:	2201      	movs	r2, #1
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000a46:	230f      	movs	r3, #15
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a4e:	e009      	b.n	8000a64 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a54:	2210      	movs	r2, #16
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a64:	230f      	movs	r3, #15
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b004      	add	sp, #16
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	fffffefd 	.word	0xfffffefd
 8000a78:	fffe0219 	.word	0xfffe0219
 8000a7c:	833fffe7 	.word	0x833fffe7

08000a80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2204      	movs	r2, #4
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d138      	bne.n	8000b0e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2234      	movs	r2, #52	; 0x34
 8000aa0:	5c9b      	ldrb	r3, [r3, r2]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <HAL_ADC_Start+0x2a>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e038      	b.n	8000b1c <HAL_ADC_Start+0x9c>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2234      	movs	r2, #52	; 0x34
 8000aae:	2101      	movs	r1, #1
 8000ab0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7e5b      	ldrb	r3, [r3, #25]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d007      	beq.n	8000aca <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fc      	adds	r4, r7, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 f9e3 	bl	8000e8c <ADC_Enable>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000aca:	230f      	movs	r3, #15
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d120      	bne.n	8000b16 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_ADC_Start+0xa4>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2234      	movs	r2, #52	; 0x34
 8000af0:	2100      	movs	r1, #0
 8000af2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	221c      	movs	r2, #28
 8000afa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2104      	movs	r1, #4
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	e003      	b.n	8000b16 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	2202      	movs	r2, #2
 8000b14:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	781b      	ldrb	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b005      	add	sp, #20
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	fffff0fe 	.word	0xfffff0fe

08000b28 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d102      	bne.n	8000b40 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e014      	b.n	8000b6a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d10b      	bne.n	8000b66 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	2220      	movs	r2, #32
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2234      	movs	r2, #52	; 0x34
 8000b5e:	2100      	movs	r1, #0
 8000b60:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e071      	b.n	8000c4a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000b66:	230c      	movs	r3, #12
 8000b68:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b6a:	f7ff fe3f 	bl	80007ec <HAL_GetTick>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000b72:	e01f      	b.n	8000bb4 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	d01c      	beq.n	8000bb4 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d007      	beq.n	8000b90 <HAL_ADC_PollForConversion+0x68>
 8000b80:	f7ff fe34 	bl	80007ec <HAL_GetTick>
 8000b84:	0002      	movs	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d211      	bcs.n	8000bb4 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d10b      	bne.n	8000bb4 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2234      	movs	r2, #52	; 0x34
 8000bac:	2100      	movs	r1, #0
 8000bae:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e04a      	b.n	8000c4a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d0d9      	beq.n	8000b74 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	23c0      	movs	r3, #192	; 0xc0
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d12d      	bne.n	8000c38 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d129      	bne.n	8000c38 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2208      	movs	r2, #8
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d122      	bne.n	8000c38 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d110      	bne.n	8000c20 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	210c      	movs	r1, #12
 8000c0a:	438a      	bics	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_ADC_PollForConversion+0x12c>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	2201      	movs	r2, #1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c1e:	e00b      	b.n	8000c38 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c24:	2220      	movs	r2, #32
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c30:	2201      	movs	r2, #1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7e1b      	ldrb	r3, [r3, #24]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d103      	bne.n	8000c48 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	220c      	movs	r2, #12
 8000c46:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	fffffefe 	.word	0xfffffefe

08000c58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	055b      	lsls	r3, r3, #21
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d011      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x46>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00d      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x46>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d009      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x46>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d005      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x46>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d001      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x46>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2234      	movs	r2, #52	; 0x34
 8000cba:	5c9b      	ldrb	r3, [r3, r2]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0x54>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e0d0      	b.n	8000e66 <HAL_ADC_ConfigChannel+0x1f6>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2234      	movs	r2, #52	; 0x34
 8000cc8:	2101      	movs	r1, #1
 8000cca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d000      	beq.n	8000cda <HAL_ADC_ConfigChannel+0x6a>
 8000cd8:	e0b4      	b.n	8000e44 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4a64      	ldr	r2, [pc, #400]	; (8000e70 <HAL_ADC_ConfigChannel+0x200>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d100      	bne.n	8000ce6 <HAL_ADC_ConfigChannel+0x76>
 8000ce4:	e082      	b.n	8000dec <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	055b      	lsls	r3, r3, #21
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d037      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d033      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d02f      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d02b      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d027      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d023      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	2b06      	cmp	r3, #6
 8000d36:	d01f      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b07      	cmp	r3, #7
 8000d3e:	d01b      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	2107      	movs	r1, #7
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d012      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	438a      	bics	r2, r1
 8000d60:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6959      	ldr	r1, [r3, #20]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	401a      	ands	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d007      	beq.n	8000d90 <HAL_ADC_ConfigChannel+0x120>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b11      	cmp	r3, #17
 8000d86:	d003      	beq.n	8000d90 <HAL_ADC_ConfigChannel+0x120>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b12      	cmp	r3, #18
 8000d8e:	d163      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000d90:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <HAL_ADC_ConfigChannel+0x204>)
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d009      	beq.n	8000db0 <HAL_ADC_ConfigChannel+0x140>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b11      	cmp	r3, #17
 8000da2:	d102      	bne.n	8000daa <HAL_ADC_ConfigChannel+0x13a>
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	03db      	lsls	r3, r3, #15
 8000da8:	e004      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x144>
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	045b      	lsls	r3, r3, #17
 8000dae:	e001      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x144>
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	041b      	lsls	r3, r3, #16
 8000db4:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <HAL_ADC_ConfigChannel+0x204>)
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d14a      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_ADC_ConfigChannel+0x208>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	492d      	ldr	r1, [pc, #180]	; (8000e7c <HAL_ADC_ConfigChannel+0x20c>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff f99d 	bl	8000108 <__udivsi3>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ddc:	e002      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f9      	bne.n	8000dde <HAL_ADC_ConfigChannel+0x16e>
 8000dea:	e035      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2101      	movs	r1, #1
 8000df8:	4099      	lsls	r1, r3
 8000dfa:	000b      	movs	r3, r1
 8000dfc:	43d9      	mvns	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	400a      	ands	r2, r1
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b10      	cmp	r3, #16
 8000e0c:	d007      	beq.n	8000e1e <HAL_ADC_ConfigChannel+0x1ae>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b11      	cmp	r3, #17
 8000e14:	d003      	beq.n	8000e1e <HAL_ADC_ConfigChannel+0x1ae>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b12      	cmp	r3, #18
 8000e1c:	d11c      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_ADC_ConfigChannel+0x204>)
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d007      	beq.n	8000e3a <HAL_ADC_ConfigChannel+0x1ca>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b11      	cmp	r3, #17
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x1c6>
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_ADC_ConfigChannel+0x210>)
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x1cc>
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_ADC_ConfigChannel+0x214>)
 8000e38:	e000      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x1cc>
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_ADC_ConfigChannel+0x218>)
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_ADC_ConfigChannel+0x204>)
 8000e3e:	400b      	ands	r3, r1
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e009      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e48:	2220      	movs	r2, #32
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	00001001 	.word	0x00001001
 8000e74:	40012708 	.word	0x40012708
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	000f4240 	.word	0x000f4240
 8000e80:	ffbfffff 	.word	0xffbfffff
 8000e84:	feffffff 	.word	0xfeffffff
 8000e88:	ff7fffff 	.word	0xff7fffff

08000e8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d112      	bne.n	8000ed0 <ADC_Enable+0x44>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d009      	beq.n	8000ecc <ADC_Enable+0x40>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d101      	bne.n	8000ed0 <ADC_Enable+0x44>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <ADC_Enable+0x46>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d152      	bne.n	8000f7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <ADC_Enable+0xfc>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e03f      	b.n	8000f7e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <ADC_Enable+0x100>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	491f      	ldr	r1, [pc, #124]	; (8000f90 <ADC_Enable+0x104>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff f8f7 	bl	8000108 <__udivsi3>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f1e:	e002      	b.n	8000f26 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f9      	bne.n	8000f20 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f2c:	f7ff fc5e 	bl	80007ec <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f34:	e01b      	b.n	8000f6e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f36:	f7ff fc59 	bl	80007ec <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d914      	bls.n	8000f6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d00d      	beq.n	8000f6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f56:	2210      	movs	r2, #16
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f62:	2201      	movs	r2, #1
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e007      	b.n	8000f7e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d1dc      	bne.n	8000f36 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	80000017 	.word	0x80000017
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	000f4240 	.word	0x000f4240

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa8:	d828      	bhi.n	8000ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <__NVIC_SetPriority+0xd4>)
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	33c0      	adds	r3, #192	; 0xc0
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	589b      	ldr	r3, [r3, r2]
 8000fba:	1dfa      	adds	r2, r7, #7
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	21ff      	movs	r1, #255	; 0xff
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	000a      	movs	r2, r1
 8000fcc:	43d2      	mvns	r2, r2
 8000fce:	401a      	ands	r2, r3
 8000fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	019b      	lsls	r3, r3, #6
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	401a      	ands	r2, r3
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	4003      	ands	r3, r0
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <__NVIC_SetPriority+0xd4>)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	33c0      	adds	r3, #192	; 0xc0
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ffa:	e031      	b.n	8001060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <__NVIC_SetPriority+0xd8>)
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	0019      	movs	r1, r3
 8001004:	230f      	movs	r3, #15
 8001006:	400b      	ands	r3, r1
 8001008:	3b08      	subs	r3, #8
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3306      	adds	r3, #6
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	18d3      	adds	r3, r2, r3
 8001012:	3304      	adds	r3, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1dfa      	adds	r2, r7, #7
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	0011      	movs	r1, r2
 800101c:	2203      	movs	r2, #3
 800101e:	400a      	ands	r2, r1
 8001020:	00d2      	lsls	r2, r2, #3
 8001022:	21ff      	movs	r1, #255	; 0xff
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	43d2      	mvns	r2, r2
 800102a:	401a      	ands	r2, r3
 800102c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	019b      	lsls	r3, r3, #6
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	401a      	ands	r2, r3
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0018      	movs	r0, r3
 800103c:	2303      	movs	r3, #3
 800103e:	4003      	ands	r3, r0
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <__NVIC_SetPriority+0xd8>)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	001c      	movs	r4, r3
 800104c:	230f      	movs	r3, #15
 800104e:	4023      	ands	r3, r4
 8001050:	3b08      	subs	r3, #8
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	430a      	orrs	r2, r1
 8001056:	3306      	adds	r3, #6
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	18c3      	adds	r3, r0, r3
 800105c:	3304      	adds	r3, #4
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b003      	add	sp, #12
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	045b      	lsls	r3, r3, #17
 8001080:	429a      	cmp	r2, r3
 8001082:	d301      	bcc.n	8001088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001084:	2301      	movs	r3, #1
 8001086:	e010      	b.n	80010aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <SysTick_Config+0x44>)
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	3a01      	subs	r2, #1
 800108e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
 8001094:	2103      	movs	r1, #3
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ff7c 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x44>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x44>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	210f      	movs	r1, #15
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff ffbf 	bl	8001070 <SysTick_Config>
 80010f2:	0003      	movs	r3, r0
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e155      	b.n	80013b8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <HAL_GPIO_Init+0x28>
 8001122:	e146      	b.n	80013b2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	4013      	ands	r3, r2
 800112c:	2b01      	cmp	r3, #1
 800112e:	d005      	beq.n	800113c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001138:	2b02      	cmp	r3, #2
 800113a:	d130      	bne.n	800119e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	409a      	lsls	r2, r3
 800114a:	0013      	movs	r3, r2
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	409a      	lsls	r2, r3
 800115e:	0013      	movs	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001172:	2201      	movs	r2, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	2201      	movs	r2, #1
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d017      	beq.n	80011da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d123      	bne.n	800122e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	58d3      	ldr	r3, [r2, r3]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2207      	movs	r2, #7
 80011f8:	4013      	ands	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2107      	movs	r1, #7
 8001212:	400b      	ands	r3, r1
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	6939      	ldr	r1, [r7, #16]
 800122c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	401a      	ands	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	23c0      	movs	r3, #192	; 0xc0
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_GPIO_Init+0x174>
 800126e:	e0a0      	b.n	80013b2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <HAL_GPIO_Init+0x2d4>)
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <HAL_GPIO_Init+0x2d4>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_GPIO_Init+0x2d4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x2d8>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	589b      	ldr	r3, [r3, r2]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2203      	movs	r2, #3
 800129a:	4013      	ands	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	409a      	lsls	r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	2390      	movs	r3, #144	; 0x90
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a47      	ldr	r2, [pc, #284]	; (80013d8 <HAL_GPIO_Init+0x2dc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x1ea>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a46      	ldr	r2, [pc, #280]	; (80013dc <HAL_GPIO_Init+0x2e0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x1e6>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a45      	ldr	r2, [pc, #276]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x1e2>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x1de>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x1f0>
 80012da:	2305      	movs	r3, #5
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x1f0>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x1f0>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x1f0>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x1f0>
 80012ea:	2300      	movs	r3, #0
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	2103      	movs	r1, #3
 80012f0:	400a      	ands	r2, r1
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2d8>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	035b      	lsls	r3, r3, #13
 8001376:	4013      	ands	r3, r2
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	039b      	lsls	r3, r3, #14
 80013a0:	4013      	ands	r3, r2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	40da      	lsrs	r2, r3
 80013c0:	1e13      	subs	r3, r2, #0
 80013c2:	d000      	beq.n	80013c6 <HAL_GPIO_Init+0x2ca>
 80013c4:	e6a2      	b.n	800110c <HAL_GPIO_Init+0x10>
  } 
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	48000800 	.word	0x48000800
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	48001000 	.word	0x48001000
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	0008      	movs	r0, r1
 80013f6:	0011      	movs	r1, r2
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	1c02      	adds	r2, r0, #0
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	1c7b      	adds	r3, r7, #1
 8001400:	1c0a      	adds	r2, r1, #0
 8001402:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001404:	1c7b      	adds	r3, r7, #1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	1cbb      	adds	r3, r7, #2
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 fb76 	bl	8001b28 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d100      	bne.n	8001448 <HAL_RCC_OscConfig+0x20>
 8001446:	e08e      	b.n	8001566 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001448:	4bc5      	ldr	r3, [pc, #788]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	220c      	movs	r2, #12
 800144e:	4013      	ands	r3, r2
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00e      	beq.n	8001472 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001454:	4bc2      	ldr	r3, [pc, #776]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	220c      	movs	r2, #12
 800145a:	4013      	ands	r3, r2
 800145c:	2b08      	cmp	r3, #8
 800145e:	d117      	bne.n	8001490 <HAL_RCC_OscConfig+0x68>
 8001460:	4bbf      	ldr	r3, [pc, #764]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	23c0      	movs	r3, #192	; 0xc0
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	401a      	ands	r2, r3
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	429a      	cmp	r2, r3
 8001470:	d10e      	bne.n	8001490 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4bbb      	ldr	r3, [pc, #748]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d100      	bne.n	8001480 <HAL_RCC_OscConfig+0x58>
 800147e:	e071      	b.n	8001564 <HAL_RCC_OscConfig+0x13c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d000      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
 8001488:	e06c      	b.n	8001564 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f000 fb4c 	bl	8001b28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x80>
 8001498:	4bb1      	ldr	r3, [pc, #708]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4bb0      	ldr	r3, [pc, #704]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e02f      	b.n	8001508 <HAL_RCC_OscConfig+0xe0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0xa2>
 80014b0:	4bab      	ldr	r3, [pc, #684]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4baa      	ldr	r3, [pc, #680]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014b6:	49ab      	ldr	r1, [pc, #684]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	4ba8      	ldr	r3, [pc, #672]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4ba7      	ldr	r3, [pc, #668]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014c2:	49a9      	ldr	r1, [pc, #676]	; (8001768 <HAL_RCC_OscConfig+0x340>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e01e      	b.n	8001508 <HAL_RCC_OscConfig+0xe0>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10e      	bne.n	80014f0 <HAL_RCC_OscConfig+0xc8>
 80014d2:	4ba3      	ldr	r3, [pc, #652]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4ba2      	ldr	r3, [pc, #648]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	02c9      	lsls	r1, r1, #11
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	4b9f      	ldr	r3, [pc, #636]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xe0>
 80014f0:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b9a      	ldr	r3, [pc, #616]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014f6:	499b      	ldr	r1, [pc, #620]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	4b98      	ldr	r3, [pc, #608]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001502:	4999      	ldr	r1, [pc, #612]	; (8001768 <HAL_RCC_OscConfig+0x340>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff f96c 	bl	80007ec <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151a:	f7ff f967 	bl	80007ec <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e2fd      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0xf2>
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff f957 	bl	80007ec <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff f952 	bl	80007ec <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e2e8      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x11c>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x14a>
 8001570:	e06c      	b.n	800164c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	220c      	movs	r2, #12
 8001578:	4013      	ands	r3, r2
 800157a:	d00e      	beq.n	800159a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	220c      	movs	r2, #12
 8001582:	4013      	ands	r3, r2
 8001584:	2b08      	cmp	r3, #8
 8001586:	d11f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1a0>
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	401a      	ands	r2, r3
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	429a      	cmp	r2, r3
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b71      	ldr	r3, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x188>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e2bb      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22f8      	movs	r2, #248	; 0xf8
 80015b6:	4393      	bics	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e041      	b.n	800164c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d024      	beq.n	800161a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff f906 	bl	80007ec <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff f901 	bl	80007ec <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e297      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d0f1      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	22f8      	movs	r2, #248	; 0xf8
 8001608:	4393      	bics	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	00da      	lsls	r2, r3, #3
 8001612:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff f8e1 	bl	80007ec <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff f8dc 	bl	80007ec <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e272      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d1f1      	bne.n	8001630 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2208      	movs	r2, #8
 8001652:	4013      	ands	r3, r2
 8001654:	d036      	beq.n	80016c4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff f8bf 	bl	80007ec <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff f8ba 	bl	80007ec <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e250      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d0f1      	beq.n	8001674 <HAL_RCC_OscConfig+0x24c>
 8001690:	e018      	b.n	80016c4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff f8a5 	bl	80007ec <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff f8a0 	bl	80007ec <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e236      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d1f1      	bne.n	80016a8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2204      	movs	r2, #4
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2a8>
 80016ce:	e0b5      	b.n	800183c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d0:	201f      	movs	r0, #31
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	055b      	lsls	r3, r3, #21
 80016e0:	4013      	ands	r3, r2
 80016e2:	d110      	bne.n	8001706 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0549      	lsls	r1, r1, #21
 80016ee:	430a      	orrs	r2, r1
 80016f0:	61da      	str	r2, [r3, #28]
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	055b      	lsls	r3, r3, #21
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001700:	183b      	adds	r3, r7, r0
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_OscConfig+0x344>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4013      	ands	r3, r2
 8001710:	d11a      	bne.n	8001748 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_OscConfig+0x344>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x344>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0049      	lsls	r1, r1, #1
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001720:	f7ff f864 	bl	80007ec <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff f85f 	bl	80007ec <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1f5      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x344>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10f      	bne.n	8001770 <HAL_RCC_OscConfig+0x348>
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001752:	6a1a      	ldr	r2, [r3, #32]
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	621a      	str	r2, [r3, #32]
 800175c:	e036      	b.n	80017cc <HAL_RCC_OscConfig+0x3a4>
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000
 8001764:	fffeffff 	.word	0xfffeffff
 8001768:	fffbffff 	.word	0xfffbffff
 800176c:	40007000 	.word	0x40007000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x36a>
 8001778:	4bca      	ldr	r3, [pc, #808]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	4bc9      	ldr	r3, [pc, #804]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	4bc7      	ldr	r3, [pc, #796]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	4bc6      	ldr	r3, [pc, #792]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800178a:	2104      	movs	r1, #4
 800178c:	438a      	bics	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x3a4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x38c>
 800179a:	4bc2      	ldr	r3, [pc, #776]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4bc1      	ldr	r3, [pc, #772]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]
 80017a6:	4bbf      	ldr	r3, [pc, #764]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4bbe      	ldr	r3, [pc, #760]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	621a      	str	r2, [r3, #32]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x3a4>
 80017b4:	4bbb      	ldr	r3, [pc, #748]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4bba      	ldr	r3, [pc, #744]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	621a      	str	r2, [r3, #32]
 80017c0:	4bb8      	ldr	r3, [pc, #736]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4bb7      	ldr	r3, [pc, #732]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	2104      	movs	r1, #4
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d014      	beq.n	80017fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f80a 	bl	80007ec <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff f805 	bl	80007ec <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4aaf      	ldr	r2, [pc, #700]	; (8001aa8 <HAL_RCC_OscConfig+0x680>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e19a      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4bac      	ldr	r3, [pc, #688]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x3b6>
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7fe fff5 	bl	80007ec <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7fe fff0 	bl	80007ec <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4aa5      	ldr	r2, [pc, #660]	; (8001aa8 <HAL_RCC_OscConfig+0x680>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e185      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001826:	231f      	movs	r3, #31
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	4b9b      	ldr	r3, [pc, #620]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001836:	499d      	ldr	r1, [pc, #628]	; (8001aac <HAL_RCC_OscConfig+0x684>)
 8001838:	400a      	ands	r2, r1
 800183a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	4013      	ands	r3, r2
 8001844:	d063      	beq.n	800190e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d12a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800184e:	4b95      	ldr	r3, [pc, #596]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001854:	2104      	movs	r1, #4
 8001856:	430a      	orrs	r2, r1
 8001858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	4b91      	ldr	r3, [pc, #580]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7fe ffc1 	bl	80007ec <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001870:	f7fe ffbc 	bl	80007ec <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e152      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d0f1      	beq.n	8001870 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800188c:	4b85      	ldr	r3, [pc, #532]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	22f8      	movs	r2, #248	; 0xf8
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
 80018a2:	e034      	b.n	800190e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	3305      	adds	r3, #5
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018ac:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018b2:	2104      	movs	r1, #4
 80018b4:	438a      	bics	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b8:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018bc:	22f8      	movs	r2, #248	; 0xf8
 80018be:	4393      	bics	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	00da      	lsls	r2, r3, #3
 80018c8:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	e01e      	b.n	800190e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d0:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d4:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	2104      	movs	r1, #4
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018dc:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7fe ff80 	bl	80007ec <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018f2:	f7fe ff7b 	bl	80007ec <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e111      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001904:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f1      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2220      	movs	r2, #32
 8001914:	4013      	ands	r3, r2
 8001916:	d05c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001918:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	220c      	movs	r2, #12
 800191e:	4013      	ands	r3, r2
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d00e      	beq.n	8001942 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800192c:	2b08      	cmp	r3, #8
 800192e:	d114      	bne.n	800195a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001930:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	401a      	ands	r2, r3
 800193a:	23c0      	movs	r3, #192	; 0xc0
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	429a      	cmp	r2, r3
 8001940:	d10b      	bne.n	800195a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	4013      	ands	r3, r2
 800194c:	d040      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5a8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d03c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0e6      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01b      	beq.n	800199a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001966:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0249      	lsls	r1, r1, #9
 800196c:	430a      	orrs	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7fe ff3c 	bl	80007ec <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7fe ff37 	bl	80007ec <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0cd      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800198e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x552>
 8001998:	e01b      	b.n	80019d2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800199a:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	4943      	ldr	r1, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x688>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7fe ff21 	bl	80007ec <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b0:	f7fe ff1c 	bl	80007ec <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0b2      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	025b      	lsls	r3, r3, #9
 80019ca:	4013      	ands	r3, r2
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x588>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019d0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x5b4>
 80019da:	e0a4      	b.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	220c      	movs	r2, #12
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x5c2>
 80019e8:	e078      	b.n	8001adc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d14c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	492e      	ldr	r1, [pc, #184]	; (8001ab4 <HAL_RCC_OscConfig+0x68c>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7fe fef5 	bl	80007ec <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7fe fef0 	bl	80007ec <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e086      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	049b      	lsls	r3, r3, #18
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x690>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0449      	lsls	r1, r1, #17
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7fe fec3 	bl	80007ec <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7fe febe 	bl	80007ec <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e054      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x644>
 8001a8a:	e04c      	b.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x68c>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fea8 	bl	80007ec <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x6a6>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	00001388 	.word	0x00001388
 8001aac:	efffffff 	.word	0xefffffff
 8001ab0:	fffeffff 	.word	0xfffeffff
 8001ab4:	feffffff 	.word	0xfeffffff
 8001ab8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7fe fe96 	bl	80007ec <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e02c      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_OscConfig+0x708>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	049b      	lsls	r3, r3, #18
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x694>
 8001ada:	e024      	b.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e01f      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_RCC_OscConfig+0x708>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x708>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	025b      	lsls	r3, r3, #9
 8001afa:	401a      	ands	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10e      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	220f      	movs	r2, #15
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	23f0      	movs	r3, #240	; 0xf0
 8001b16:	039b      	lsls	r3, r3, #14
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b008      	add	sp, #32
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0bf      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d911      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0a6      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d015      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d006      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b8e:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b94:	21e0      	movs	r1, #224	; 0xe0
 8001b96:	00c9      	lsls	r1, r1, #3
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	22f0      	movs	r2, #240	; 0xf0
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d04c      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d120      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07a      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	4013      	ands	r3, r2
 8001be4:	d114      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06e      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d108      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e062      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e05b      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	4393      	bics	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7fe fde2 	bl	80007ec <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7fe fddd 	bl	80007ec <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <HAL_RCC_ClockConfig+0x1a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e042      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	220c      	movs	r2, #12
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d211      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x19c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_RCC_ClockConfig+0x1a8>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ca4:	f000 f820 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca8:	0001      	movs	r1, r0
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1a0>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_RCC_ClockConfig+0x1ac>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	000a      	movs	r2, r1
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f7fe fd4d 	bl	8000760 <HAL_InitTick>
  
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	00001388 	.word	0x00001388
 8001cdc:	fffff8ff 	.word	0xfffff8ff
 8001ce0:	080029fc 	.word	0x080029fc
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b08f      	sub	sp, #60	; 0x3c
 8001cec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cee:	2314      	movs	r3, #20
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	4a38      	ldr	r2, [pc, #224]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001cf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cf6:	c313      	stmia	r3!, {r0, r1, r4}
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d02:	c313      	stmia	r3!, {r0, r1, r4}
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	220c      	movs	r2, #12
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d047      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0xd4>
 8001d2c:	d849      	bhi.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xda>
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x50>
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x56>
 8001d36:	e044      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3c:	e044      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	0c9b      	lsrs	r3, r3, #18
 8001d42:	220f      	movs	r2, #15
 8001d44:	4013      	ands	r3, r2
 8001d46:	2214      	movs	r2, #20
 8001d48:	18ba      	adds	r2, r7, r2
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	220f      	movs	r2, #15
 8001d54:	4013      	ands	r3, r2
 8001d56:	1d3a      	adds	r2, r7, #4
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5e:	23c0      	movs	r3, #192	; 0xc0
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	401a      	ands	r2, r3
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	025b      	lsls	r3, r3, #9
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d109      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d6e:	481c      	ldr	r0, [pc, #112]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d70:	f7fe f9ca 	bl	8000108 <__udivsi3>
 8001d74:	0003      	movs	r3, r0
 8001d76:	001a      	movs	r2, r3
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	4353      	muls	r3, r2
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	e01a      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	025b      	lsls	r3, r3, #9
 8001d86:	401a      	ands	r2, r3
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d109      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d94:	f7fe f9b8 	bl	8000108 <__udivsi3>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	4353      	muls	r3, r2
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da6:	480e      	ldr	r0, [pc, #56]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da8:	f7fe f9ae 	bl	8000108 <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	001a      	movs	r2, r3
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	4353      	muls	r3, r2
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dba:	e005      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc0:	e002      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b00f      	add	sp, #60	; 0x3c
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	080029dc 	.word	0x080029dc
 8001dd8:	080029ec 	.word	0x080029ec
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	007a1200 	.word	0x007a1200
 8001de4:	02dc6c00 	.word	0x02dc6c00

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	20000000 	.word	0x20000000

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e00:	f7ff fff2 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e04:	0001      	movs	r1, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4013      	ands	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	40d9      	lsrs	r1, r3
 8001e16:	000b      	movs	r3, r1
}    
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08002a0c 	.word	0x08002a0c

08001e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e44:	e08e      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2017      	movs	r0, #23
 8001e48:	183b      	adds	r3, r7, r0
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b6e      	ldr	r3, [pc, #440]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	055b      	lsls	r3, r3, #21
 8001e56:	4013      	ands	r3, r2
 8001e58:	d110      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0549      	lsls	r1, r1, #21
 8001e64:	430a      	orrs	r2, r1
 8001e66:	61da      	str	r2, [r3, #28]
 8001e68:	4b67      	ldr	r3, [pc, #412]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	055b      	lsls	r3, r3, #21
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	d11a      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e88:	4b60      	ldr	r3, [pc, #384]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0049      	lsls	r1, r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7fe fca9 	bl	80007ec <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe fca4 	bl	80007ec <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0a6      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ebe:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d034      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d02c      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0249      	lsls	r1, r1, #9
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001efe:	4945      	ldr	r1, [pc, #276]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f04:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fc6b 	bl	80007ec <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fc66 	bl	80007ec <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	4a3c      	ldr	r2, [pc, #240]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e067      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4e:	2317      	movs	r3, #23
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f5e:	492f      	ldr	r1, [pc, #188]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	2203      	movs	r2, #3
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2202      	movs	r2, #2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b006      	add	sp, #24
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	fffffcff 	.word	0xfffffcff
 8002014:	fffeffff 	.word	0xfffeffff
 8002018:	00001388 	.word	0x00001388
 800201c:	efffffff 	.word	0xefffffff
 8002020:	fffcffff 	.word	0xfffcffff

08002024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e044      	b.n	80020c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2274      	movs	r2, #116	; 0x74
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f7fe fae3 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2224      	movs	r2, #36	; 0x24
 8002052:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2101      	movs	r1, #1
 8002060:	438a      	bics	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f8da 	bl	8002220 <UART_SetConfig>
 800206c:	0003      	movs	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e024      	b.n	80020c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 fa55 	bl	8002530 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	490d      	ldr	r1, [pc, #52]	; (80020c8 <HAL_UART_Init+0xa4>)
 8002092:	400a      	ands	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	212a      	movs	r1, #42	; 0x2a
 80020a2:	438a      	bics	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 faed 	bl	8002698 <UART_CheckIdleState>
 80020be:	0003      	movs	r3, r0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b002      	add	sp, #8
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	ffffb7ff 	.word	0xffffb7ff

080020cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d000      	beq.n	80020e6 <HAL_UART_Transmit+0x1a>
 80020e4:	e096      	b.n	8002214 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_UART_Transmit+0x28>
 80020ec:	1dbb      	adds	r3, r7, #6
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e08e      	b.n	8002216 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	015b      	lsls	r3, r3, #5
 8002100:	429a      	cmp	r2, r3
 8002102:	d109      	bne.n	8002118 <HAL_UART_Transmit+0x4c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2201      	movs	r2, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d001      	beq.n	8002118 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e07e      	b.n	8002216 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2274      	movs	r2, #116	; 0x74
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_UART_Transmit+0x5a>
 8002122:	2302      	movs	r3, #2
 8002124:	e077      	b.n	8002216 <HAL_UART_Transmit+0x14a>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2274      	movs	r2, #116	; 0x74
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	2100      	movs	r1, #0
 8002134:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2221      	movs	r2, #33	; 0x21
 800213a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800213c:	f7fe fb56 	bl	80007ec <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1dba      	adds	r2, r7, #6
 8002148:	2150      	movs	r1, #80	; 0x50
 800214a:	8812      	ldrh	r2, [r2, #0]
 800214c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1dba      	adds	r2, r7, #6
 8002152:	2152      	movs	r1, #82	; 0x52
 8002154:	8812      	ldrh	r2, [r2, #0]
 8002156:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	015b      	lsls	r3, r3, #5
 8002160:	429a      	cmp	r2, r3
 8002162:	d108      	bne.n	8002176 <HAL_UART_Transmit+0xaa>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d104      	bne.n	8002176 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	e003      	b.n	800217e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2274      	movs	r2, #116	; 0x74
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002186:	e02d      	b.n	80021e4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	0013      	movs	r3, r2
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	f000 fac7 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 800219a:	1e03      	subs	r3, r0, #0
 800219c:	d001      	beq.n	80021a2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e039      	b.n	8002216 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	05d2      	lsls	r2, r2, #23
 80021b2:	0dd2      	lsrs	r2, r2, #23
 80021b4:	b292      	uxth	r2, r2
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	3302      	adds	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e008      	b.n	80021d2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b292      	uxth	r2, r2
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	3301      	adds	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2252      	movs	r2, #82	; 0x52
 80021d6:	5a9b      	ldrh	r3, [r3, r2]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b299      	uxth	r1, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2252      	movs	r2, #82	; 0x52
 80021e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2252      	movs	r2, #82	; 0x52
 80021e8:	5a9b      	ldrh	r3, [r3, r2]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1cb      	bne.n	8002188 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	0013      	movs	r3, r2
 80021fa:	2200      	movs	r2, #0
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	f000 fa93 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8002202:	1e03      	subs	r3, r0, #0
 8002204:	d001      	beq.n	800220a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e005      	b.n	8002216 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b008      	add	sp, #32
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002228:	231e      	movs	r3, #30
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4aaf      	ldr	r2, [pc, #700]	; (800250c <UART_SetConfig+0x2ec>)
 8002250:	4013      	ands	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4aaa      	ldr	r2, [pc, #680]	; (8002510 <UART_SetConfig+0x2f0>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4aa1      	ldr	r2, [pc, #644]	; (8002514 <UART_SetConfig+0x2f4>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a9d      	ldr	r2, [pc, #628]	; (8002518 <UART_SetConfig+0x2f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d127      	bne.n	80022f6 <UART_SetConfig+0xd6>
 80022a6:	4b9d      	ldr	r3, [pc, #628]	; (800251c <UART_SetConfig+0x2fc>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	2203      	movs	r2, #3
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d00d      	beq.n	80022ce <UART_SetConfig+0xae>
 80022b2:	d81b      	bhi.n	80022ec <UART_SetConfig+0xcc>
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d014      	beq.n	80022e2 <UART_SetConfig+0xc2>
 80022b8:	d818      	bhi.n	80022ec <UART_SetConfig+0xcc>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <UART_SetConfig+0xa4>
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d00a      	beq.n	80022d8 <UART_SetConfig+0xb8>
 80022c2:	e013      	b.n	80022ec <UART_SetConfig+0xcc>
 80022c4:	231f      	movs	r3, #31
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e065      	b.n	800239a <UART_SetConfig+0x17a>
 80022ce:	231f      	movs	r3, #31
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e060      	b.n	800239a <UART_SetConfig+0x17a>
 80022d8:	231f      	movs	r3, #31
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2204      	movs	r2, #4
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e05b      	b.n	800239a <UART_SetConfig+0x17a>
 80022e2:	231f      	movs	r3, #31
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2208      	movs	r2, #8
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e056      	b.n	800239a <UART_SetConfig+0x17a>
 80022ec:	231f      	movs	r3, #31
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2210      	movs	r2, #16
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e051      	b.n	800239a <UART_SetConfig+0x17a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a89      	ldr	r2, [pc, #548]	; (8002520 <UART_SetConfig+0x300>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d134      	bne.n	800236a <UART_SetConfig+0x14a>
 8002300:	4b86      	ldr	r3, [pc, #536]	; (800251c <UART_SetConfig+0x2fc>)
 8002302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	22c0      	movs	r2, #192	; 0xc0
 800230c:	0292      	lsls	r2, r2, #10
 800230e:	4293      	cmp	r3, r2
 8002310:	d017      	beq.n	8002342 <UART_SetConfig+0x122>
 8002312:	22c0      	movs	r2, #192	; 0xc0
 8002314:	0292      	lsls	r2, r2, #10
 8002316:	4293      	cmp	r3, r2
 8002318:	d822      	bhi.n	8002360 <UART_SetConfig+0x140>
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0292      	lsls	r2, r2, #10
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <UART_SetConfig+0x136>
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	0292      	lsls	r2, r2, #10
 8002326:	4293      	cmp	r3, r2
 8002328:	d81a      	bhi.n	8002360 <UART_SetConfig+0x140>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <UART_SetConfig+0x118>
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0252      	lsls	r2, r2, #9
 8002332:	4293      	cmp	r3, r2
 8002334:	d00a      	beq.n	800234c <UART_SetConfig+0x12c>
 8002336:	e013      	b.n	8002360 <UART_SetConfig+0x140>
 8002338:	231f      	movs	r3, #31
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e02b      	b.n	800239a <UART_SetConfig+0x17a>
 8002342:	231f      	movs	r3, #31
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2202      	movs	r2, #2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e026      	b.n	800239a <UART_SetConfig+0x17a>
 800234c:	231f      	movs	r3, #31
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e021      	b.n	800239a <UART_SetConfig+0x17a>
 8002356:	231f      	movs	r3, #31
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2208      	movs	r2, #8
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e01c      	b.n	800239a <UART_SetConfig+0x17a>
 8002360:	231f      	movs	r3, #31
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2210      	movs	r2, #16
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e017      	b.n	800239a <UART_SetConfig+0x17a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <UART_SetConfig+0x304>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d104      	bne.n	800237e <UART_SetConfig+0x15e>
 8002374:	231f      	movs	r3, #31
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e00d      	b.n	800239a <UART_SetConfig+0x17a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a69      	ldr	r2, [pc, #420]	; (8002528 <UART_SetConfig+0x308>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d104      	bne.n	8002392 <UART_SetConfig+0x172>
 8002388:	231f      	movs	r3, #31
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e003      	b.n	800239a <UART_SetConfig+0x17a>
 8002392:	231f      	movs	r3, #31
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2210      	movs	r2, #16
 8002398:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d15d      	bne.n	8002462 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80023a6:	231f      	movs	r3, #31
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d015      	beq.n	80023dc <UART_SetConfig+0x1bc>
 80023b0:	dc18      	bgt.n	80023e4 <UART_SetConfig+0x1c4>
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00d      	beq.n	80023d2 <UART_SetConfig+0x1b2>
 80023b6:	dc15      	bgt.n	80023e4 <UART_SetConfig+0x1c4>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <UART_SetConfig+0x1a2>
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d005      	beq.n	80023cc <UART_SetConfig+0x1ac>
 80023c0:	e010      	b.n	80023e4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023c2:	f7ff fd1b 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80023c6:	0003      	movs	r3, r0
 80023c8:	61bb      	str	r3, [r7, #24]
        break;
 80023ca:	e012      	b.n	80023f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023cc:	4b57      	ldr	r3, [pc, #348]	; (800252c <UART_SetConfig+0x30c>)
 80023ce:	61bb      	str	r3, [r7, #24]
        break;
 80023d0:	e00f      	b.n	80023f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023d2:	f7ff fc89 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]
        break;
 80023da:	e00a      	b.n	80023f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	61bb      	str	r3, [r7, #24]
        break;
 80023e2:	e006      	b.n	80023f2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023e8:	231e      	movs	r3, #30
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
        break;
 80023f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d100      	bne.n	80023fa <UART_SetConfig+0x1da>
 80023f8:	e07b      	b.n	80024f2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	005a      	lsls	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	18d2      	adds	r2, r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0019      	movs	r1, r3
 800240c:	0010      	movs	r0, r2
 800240e:	f7fd fe7b 	bl	8000108 <__udivsi3>
 8002412:	0003      	movs	r3, r0
 8002414:	b29b      	uxth	r3, r3
 8002416:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d91c      	bls.n	8002458 <UART_SetConfig+0x238>
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	429a      	cmp	r2, r3
 8002426:	d217      	bcs.n	8002458 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	b29a      	uxth	r2, r3
 800242c:	200e      	movs	r0, #14
 800242e:	183b      	adds	r3, r7, r0
 8002430:	210f      	movs	r1, #15
 8002432:	438a      	bics	r2, r1
 8002434:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	b29b      	uxth	r3, r3
 800243c:	2207      	movs	r2, #7
 800243e:	4013      	ands	r3, r2
 8002440:	b299      	uxth	r1, r3
 8002442:	183b      	adds	r3, r7, r0
 8002444:	183a      	adds	r2, r7, r0
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	183a      	adds	r2, r7, r0
 8002452:	8812      	ldrh	r2, [r2, #0]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	e04c      	b.n	80024f2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002458:	231e      	movs	r3, #30
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	e047      	b.n	80024f2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002462:	231f      	movs	r3, #31
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d015      	beq.n	8002498 <UART_SetConfig+0x278>
 800246c:	dc18      	bgt.n	80024a0 <UART_SetConfig+0x280>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00d      	beq.n	800248e <UART_SetConfig+0x26e>
 8002472:	dc15      	bgt.n	80024a0 <UART_SetConfig+0x280>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <UART_SetConfig+0x25e>
 8002478:	2b02      	cmp	r3, #2
 800247a:	d005      	beq.n	8002488 <UART_SetConfig+0x268>
 800247c:	e010      	b.n	80024a0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800247e:	f7ff fcbd 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002482:	0003      	movs	r3, r0
 8002484:	61bb      	str	r3, [r7, #24]
        break;
 8002486:	e012      	b.n	80024ae <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <UART_SetConfig+0x30c>)
 800248a:	61bb      	str	r3, [r7, #24]
        break;
 800248c:	e00f      	b.n	80024ae <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800248e:	f7ff fc2b 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002492:	0003      	movs	r3, r0
 8002494:	61bb      	str	r3, [r7, #24]
        break;
 8002496:	e00a      	b.n	80024ae <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	61bb      	str	r3, [r7, #24]
        break;
 800249e:	e006      	b.n	80024ae <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024a4:	231e      	movs	r3, #30
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
        break;
 80024ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01e      	beq.n	80024f2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	085a      	lsrs	r2, r3, #1
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	18d2      	adds	r2, r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0019      	movs	r1, r3
 80024c4:	0010      	movs	r0, r2
 80024c6:	f7fd fe1f 	bl	8000108 <__udivsi3>
 80024ca:	0003      	movs	r3, r0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	d909      	bls.n	80024ea <UART_SetConfig+0x2ca>
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	025b      	lsls	r3, r3, #9
 80024dc:	429a      	cmp	r2, r3
 80024de:	d204      	bcs.n	80024ea <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	e003      	b.n	80024f2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80024ea:	231e      	movs	r3, #30
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024fe:	231e      	movs	r3, #30
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b008      	add	sp, #32
 800250a:	bd80      	pop	{r7, pc}
 800250c:	efff69f3 	.word	0xefff69f3
 8002510:	ffffcfff 	.word	0xffffcfff
 8002514:	fffff4ff 	.word	0xfffff4ff
 8002518:	40013800 	.word	0x40013800
 800251c:	40021000 	.word	0x40021000
 8002520:	40004400 	.word	0x40004400
 8002524:	40004800 	.word	0x40004800
 8002528:	40004c00 	.word	0x40004c00
 800252c:	007a1200 	.word	0x007a1200

08002530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2201      	movs	r2, #1
 800253e:	4013      	ands	r3, r2
 8002540:	d00b      	beq.n	800255a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <UART_AdvFeatureConfig+0x144>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d00b      	beq.n	800257c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a43      	ldr	r2, [pc, #268]	; (8002678 <UART_AdvFeatureConfig+0x148>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2204      	movs	r2, #4
 8002582:	4013      	ands	r3, r2
 8002584:	d00b      	beq.n	800259e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a3b      	ldr	r2, [pc, #236]	; (800267c <UART_AdvFeatureConfig+0x14c>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2208      	movs	r2, #8
 80025a4:	4013      	ands	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <UART_AdvFeatureConfig+0x150>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2210      	movs	r2, #16
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00b      	beq.n	80025e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <UART_AdvFeatureConfig+0x154>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2220      	movs	r2, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d00b      	beq.n	8002604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a25      	ldr	r2, [pc, #148]	; (8002688 <UART_AdvFeatureConfig+0x158>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	4013      	ands	r3, r2
 800260c:	d01d      	beq.n	800264a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <UART_AdvFeatureConfig+0x15c>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	035b      	lsls	r3, r3, #13
 800262e:	429a      	cmp	r2, r3
 8002630:	d10b      	bne.n	800264a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <UART_AdvFeatureConfig+0x160>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	4013      	ands	r3, r2
 8002652:	d00b      	beq.n	800266c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <UART_AdvFeatureConfig+0x164>)
 800265c:	4013      	ands	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
  }
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	fffdffff 	.word	0xfffdffff
 8002678:	fffeffff 	.word	0xfffeffff
 800267c:	fffbffff 	.word	0xfffbffff
 8002680:	ffff7fff 	.word	0xffff7fff
 8002684:	ffffefff 	.word	0xffffefff
 8002688:	ffffdfff 	.word	0xffffdfff
 800268c:	ffefffff 	.word	0xffefffff
 8002690:	ff9fffff 	.word	0xff9fffff
 8002694:	fff7ffff 	.word	0xfff7ffff

08002698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	2100      	movs	r1, #0
 80026a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026a8:	f7fe f8a0 	bl	80007ec <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2208      	movs	r2, #8
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d10c      	bne.n	80026d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	0391      	lsls	r1, r2, #14
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4a17      	ldr	r2, [pc, #92]	; (8002724 <UART_CheckIdleState+0x8c>)
 80026c8:	9200      	str	r2, [sp, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f000 f82c 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d001      	beq.n	80026d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e021      	b.n	800271c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2204      	movs	r2, #4
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d10c      	bne.n	8002700 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	03d1      	lsls	r1, r2, #15
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <UART_CheckIdleState+0x8c>)
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f000 f818 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d001      	beq.n	8002700 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e00d      	b.n	800271c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2274      	movs	r2, #116	; 0x74
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}
 8002724:	01ffffff 	.word	0x01ffffff

08002728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b094      	sub	sp, #80	; 0x50
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002738:	e0a3      	b.n	8002882 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273c:	3301      	adds	r3, #1
 800273e:	d100      	bne.n	8002742 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002740:	e09f      	b.n	8002882 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe f853 	bl	80007ec <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <UART_WaitOnFlagUntilTimeout+0x30>
 8002752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002754:	2b00      	cmp	r3, #0
 8002756:	d13d      	bne.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002758:	f3ef 8310 	mrs	r3, PRIMASK
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
 8002762:	2301      	movs	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	494c      	ldr	r1, [pc, #304]	; (80028ac <UART_WaitOnFlagUntilTimeout+0x184>)
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278a:	f3ef 8310 	mrs	r3, PRIMASK
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
 8002794:	2301      	movs	r3, #1
 8002796:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279a:	f383 8810 	msr	PRIMASK, r3
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b6:	f383 8810 	msr	PRIMASK, r3
}
 80027ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2274      	movs	r2, #116	; 0x74
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e067      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	d050      	beq.n	8002882 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	401a      	ands	r2, r3
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d146      	bne.n	8002882 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002802:	613b      	str	r3, [r7, #16]
  return(result);
 8002804:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f383 8810 	msr	PRIMASK, r3
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4923      	ldr	r1, [pc, #140]	; (80028ac <UART_WaitOnFlagUntilTimeout+0x184>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002826:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f383 8810 	msr	PRIMASK, r3
}
 800282e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002830:	f3ef 8310 	mrs	r3, PRIMASK
 8002834:	61fb      	str	r3, [r7, #28]
  return(result);
 8002836:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
 800283a:	2301      	movs	r3, #1
 800283c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	438a      	bics	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	2120      	movs	r1, #32
 8002874:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2274      	movs	r2, #116	; 0x74
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e010      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4013      	ands	r3, r2
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	425a      	negs	r2, r3
 8002892:	4153      	adcs	r3, r2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	001a      	movs	r2, r3
 8002898:	1dfb      	adds	r3, r7, #7
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d100      	bne.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80028a0:	e74b      	b.n	800273a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b014      	add	sp, #80	; 0x50
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	fffffe5f 	.word	0xfffffe5f

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2600      	movs	r6, #0
 80028b4:	4d0c      	ldr	r5, [pc, #48]	; (80028e8 <__libc_init_array+0x38>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	2600      	movs	r6, #0
 80028c2:	f000 f87d 	bl	80029c0 <_init>
 80028c6:	4d0a      	ldr	r5, [pc, #40]	; (80028f0 <__libc_init_array+0x40>)
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <__libc_init_array+0x44>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	00b3      	lsls	r3, r6, #2
 80028d6:	58eb      	ldr	r3, [r5, r3]
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	00b3      	lsls	r3, r6, #2
 80028e0:	58eb      	ldr	r3, [r5, r3]
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08002a3c 	.word	0x08002a3c
 80028ec:	08002a3c 	.word	0x08002a3c
 80028f0:	08002a3c 	.word	0x08002a3c
 80028f4:	08002a40 	.word	0x08002a40

080028f8 <__itoa>:
 80028f8:	1e93      	subs	r3, r2, #2
 80028fa:	b510      	push	{r4, lr}
 80028fc:	000c      	movs	r4, r1
 80028fe:	2b22      	cmp	r3, #34	; 0x22
 8002900:	d904      	bls.n	800290c <__itoa+0x14>
 8002902:	2300      	movs	r3, #0
 8002904:	001c      	movs	r4, r3
 8002906:	700b      	strb	r3, [r1, #0]
 8002908:	0020      	movs	r0, r4
 800290a:	bd10      	pop	{r4, pc}
 800290c:	2a0a      	cmp	r2, #10
 800290e:	d109      	bne.n	8002924 <__itoa+0x2c>
 8002910:	2800      	cmp	r0, #0
 8002912:	da07      	bge.n	8002924 <__itoa+0x2c>
 8002914:	232d      	movs	r3, #45	; 0x2d
 8002916:	700b      	strb	r3, [r1, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	4240      	negs	r0, r0
 800291c:	1861      	adds	r1, r4, r1
 800291e:	f000 f80f 	bl	8002940 <__utoa>
 8002922:	e7f1      	b.n	8002908 <__itoa+0x10>
 8002924:	2100      	movs	r1, #0
 8002926:	e7f9      	b.n	800291c <__itoa+0x24>

08002928 <itoa>:
 8002928:	b510      	push	{r4, lr}
 800292a:	f7ff ffe5 	bl	80028f8 <__itoa>
 800292e:	bd10      	pop	{r4, pc}

08002930 <memset>:
 8002930:	0003      	movs	r3, r0
 8002932:	1882      	adds	r2, r0, r2
 8002934:	4293      	cmp	r3, r2
 8002936:	d100      	bne.n	800293a <memset+0xa>
 8002938:	4770      	bx	lr
 800293a:	7019      	strb	r1, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	e7f9      	b.n	8002934 <memset+0x4>

08002940 <__utoa>:
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	000c      	movs	r4, r1
 8002944:	0016      	movs	r6, r2
 8002946:	b08d      	sub	sp, #52	; 0x34
 8002948:	2225      	movs	r2, #37	; 0x25
 800294a:	0007      	movs	r7, r0
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <__utoa+0x68>)
 800294e:	a802      	add	r0, sp, #8
 8002950:	f000 f82c 	bl	80029ac <memcpy>
 8002954:	1e62      	subs	r2, r4, #1
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	1eb3      	subs	r3, r6, #2
 800295a:	aa02      	add	r2, sp, #8
 800295c:	2500      	movs	r5, #0
 800295e:	9201      	str	r2, [sp, #4]
 8002960:	2b22      	cmp	r3, #34	; 0x22
 8002962:	d904      	bls.n	800296e <__utoa+0x2e>
 8002964:	7025      	strb	r5, [r4, #0]
 8002966:	002c      	movs	r4, r5
 8002968:	0020      	movs	r0, r4
 800296a:	b00d      	add	sp, #52	; 0x34
 800296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296e:	0038      	movs	r0, r7
 8002970:	0031      	movs	r1, r6
 8002972:	f7fd fc4f 	bl	8000214 <__aeabi_uidivmod>
 8002976:	000b      	movs	r3, r1
 8002978:	9a01      	ldr	r2, [sp, #4]
 800297a:	0029      	movs	r1, r5
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	9a00      	ldr	r2, [sp, #0]
 8002980:	3501      	adds	r5, #1
 8002982:	5553      	strb	r3, [r2, r5]
 8002984:	003b      	movs	r3, r7
 8002986:	0007      	movs	r7, r0
 8002988:	429e      	cmp	r6, r3
 800298a:	d9f0      	bls.n	800296e <__utoa+0x2e>
 800298c:	2300      	movs	r3, #0
 800298e:	0022      	movs	r2, r4
 8002990:	5563      	strb	r3, [r4, r5]
 8002992:	000b      	movs	r3, r1
 8002994:	1ac8      	subs	r0, r1, r3
 8002996:	4283      	cmp	r3, r0
 8002998:	dde6      	ble.n	8002968 <__utoa+0x28>
 800299a:	7810      	ldrb	r0, [r2, #0]
 800299c:	5ce5      	ldrb	r5, [r4, r3]
 800299e:	7015      	strb	r5, [r2, #0]
 80029a0:	54e0      	strb	r0, [r4, r3]
 80029a2:	3201      	adds	r2, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	e7f5      	b.n	8002994 <__utoa+0x54>
 80029a8:	08002a14 	.word	0x08002a14

080029ac <memcpy>:
 80029ac:	2300      	movs	r3, #0
 80029ae:	b510      	push	{r4, lr}
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d100      	bne.n	80029b6 <memcpy+0xa>
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	5ccc      	ldrb	r4, [r1, r3]
 80029b8:	54c4      	strb	r4, [r0, r3]
 80029ba:	3301      	adds	r3, #1
 80029bc:	e7f8      	b.n	80029b0 <memcpy+0x4>
	...

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
