/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TXBUFLEN (50)
#define FILTERSIZE (6)
#define LOW_VOLTAGE (40)
#define HIGH_VOLTAGE (100)
/* USER CODE END PD */

/* Private macro ------------
 * -------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint16_t adc_val;
volatile uint16_t adcResultsDMA[4];
const int adcChannelCount = sizeof(adcResultsDMA) / sizeof (adcResultsDMA[0]);
volatile int adcConversionComplete = 0;
char txBuf[TXBUFLEN];
int filterIndex = 0;
GPIO_PinState state;
int skrecam_w = 1;

struct Sensor {
	  int value;
	  int filter[FILTERSIZE];
	  int threshold;
} sensors[4];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//funkcja sprawdzajaca
void check() {
	if(filterIndex >= FILTERSIZE) filterIndex = 0;
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)adcResultsDMA, adcChannelCount);
	for (int i = 0; i < 4; i++) {
		sensors[i].value = 0;
		sensors[i].filter[filterIndex] = adcResultsDMA[i];
		for (int j = 0; j < FILTERSIZE; j++) {
			sensors[i].value += sensors[i].filter[j] ;
		}
		sensors[i].value = sensors[i].value / FILTERSIZE;
	}
	filterIndex++;
}

//kalibracja filtra
void filterCalibration() {
	for(int i = 0; i<FILTERSIZE*2; i++) {
		check();
		HAL_Delay(8);
	}
}

//kalibracja klasyczna
void calibrate() {
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
	  HAL_Delay(3000);
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);

	 //BLACK
	  HAL_Delay(1000);
//	  for (int j = 0; j < FILTERSIZE; j++) {
//		  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adcResultsDMA, adcChannelCount);
//		  for (int i = 0; i < 4; i++) {
//			  sensors[i].filter[j] = adcResultsDMA[i];
//		  }
//	  }
//
//	  for (int i = 0; i < 4; i++) {
//		  sensors[i].value = 0;
//		for (int j = 0; j < FILTERSIZE; j++) {
//		  sensors[i].value += sensors[i].filter[j] ;
//		}
//		sensors[i].threshold = sensors[i].value / FILTERSIZE;
//	  }
	  filterCalibration();
	  //for (int j = 0; j < FILTERSIZE; j++) check();

	  for (int i = 0; i < 4; i++) {
	  		  sensors[i].threshold = sensors[i].value;
	  }



	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
	  HAL_Delay(3000);
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);


	  //WHITE
	  HAL_Delay(1000);


	  filterCalibration();
	  //for (int j = 0; j < FILTERSIZE; j++) check();
	  	  for (int i = 0; i < 4; i++) {
	  		sensors[i].threshold = (sensors[i].threshold + sensors[i].value) / 2;
	  	  }
//	 	  for (int j = 0; j < FILTERSIZE; j++) {
//	 		  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adcResultsDMA, adcChannelCount);
//	 		  for (int i = 0; i < 4; i++) {
//	 			  sensors[i].filter[j] = adcResultsDMA[i];
//	 		  }
//	 	  }
//
//	 	  for (int i = 0; i < 4; i++) {
//	 		  sensors[i].value = 0;
//	 		for (int j = 0; j < FILTERSIZE; j++) {
//	 		  sensors[i].value += sensors[i].filter[j] ;
//	 		}
//	 		sensors[i].value = sensors[i].value / FILTERSIZE;

	 		//sensors[i].threshold = (sensors[i].threshold + sensors[i].value) / 2;
//	 	  }
		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
		  HAL_Delay(5000);

		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
}

//kalibracja na guzik
void calibrateButton(int iloscWcisniec) {
    if (iloscWcisniec == 1) {
    	//BLACK
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);

		filterCalibration();

		for (int i = 0; i < 4; i++) {
			sensors[i].threshold = sensors[i].value;
		}

		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
    } else if (iloscWcisniec == 2) {
    	//WHITE
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);

		filterCalibration();
		for (int i = 0; i < 4; i++) {
			sensors[i].threshold = (sensors[i].threshold + sensors[i].value) / 2;
		}

	    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
	}
}



//skrecanie
//timer1 - to lewy silnik, timer3 - to prawy silnik
//channel_1 jedzie do tylu

void pwm_start() {
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
}


void jedz_przod() {
	//lewy
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);      //PA8
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, LOW_VOLTAGE);      //PA9
	//prawy
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);      //PB4
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LOW_VOLTAGE);      //PB5
}


void jedz_tyl() {
	//lewy
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LOW_VOLTAGE);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	//prawy
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LOW_VOLTAGE);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
}


void hamuj_aktywnie() {
	//lewy
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, HIGH_VOLTAGE);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, HIGH_VOLTAGE);
	//prawy
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, HIGH_VOLTAGE);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, HIGH_VOLTAGE);
}

void hamuj_pasywnie() {
	//lewy
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	//prawy
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
}


void skrec_prawo() {
//lewy
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, HIGH_VOLTAGE);
//prawy
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
}


void skrec_lewo() {
//lewy
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//prawy
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, HIGH_VOLTAGE);
}


//ch1 - tyl, sensor[0]
//ch2- srodek, sensor[1]
//ch3 - prawy, sensor[2]
//ch4- lewy, sensor[3]


int znalazlo_przod() {
	if(sensors[1].value > sensors[1].threshold) {
		return 1;
	}
	return 0;
}


int znalazlo_lewo() {
	if(sensors[3].value > sensors[3].threshold) {
		return 1;
	}
	return 0;
}


int znalazlo_prawo() {
	if(sensors[2].value > sensors[2].threshold) {
		return 1;
	}
	return 0;
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_DMA_Init();
  MX_ADC_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc);

  //interakcja
  pwm_start();
  //int iloscWcisniec = 0;
  //lewo -> 1
  //prawo -> -1
  calibrate();

  //inne akcje
  //int liczba = 28;
  //char buffer[20];
  //uint8_t buffer[20]; -> buffer do kontroli wsad
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {

//	  	while(1) {
//	  		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == 1) {
//	  			iloscWcisniec++;
//	  			break;
//	  		}
//	  	}
//	    calibrateButton(iloscWcisniec);
//	    snprintf (txBuf, TXBUFLEN, "ilosc= %d", iloscWcisniec);

	  check();
//	  if(znalazlo_prawo() == 1 && znalazlo_lewo() == 1) {
//	  		  hamuj_aktywnie();
//	  }

	  if(znalazlo_przod() == 1) {
		  jedz_przod();
	  }

	  else if(znalazlo_prawo() == 1) {
	  	  	  //hamuj_aktywnie();
	  	      skrec_prawo();
	  }

	  else if(znalazlo_lewo() == 1) {
		  //hamuj_aktywnie();
		  skrec_lewo();
	  }
	  else {
		  HAL_Delay(2000);
		  hamuj_pasywnie();
	  }

	  //else hamuj();

	  //ch1 - tyl, sensor[0]
	  //ch2- srodek, sensor[1]
	  //ch3 - prawy, sensor[2]
	  //ch4- lewy, sensor[3]

//    snprintf (txBuf, TXBUFLEN, "CH1v = %d\tCH2v = %d\tCH3v = %d\tCH4v = %d\t\r\n", sensors[0].value, sensors[1].value, sensors[2].value, sensors[3].value);
//	  snprintf (txBuf, TXBUFLEN, "CH1v = %d\tCH1t = %d\t\r", sensors[0].threshold, sensors[0].value); //--wartosci progowe sensorow
//	  HAL_UART_Transmit(&huart2, (uint8_t *)txBuf, strlen(txBuf), HAL_MAX_DELAY);
//	  snprintf (txBuf, TXBUFLEN, "CH2v = %d\tCH2t = %d\t\r\n", sensors[1].threshold, sensors[1].value);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)txBuf, strlen(txBuf), HAL_MAX_DELAY);
//	  snprintf (txBuf, TXBUFLEN, "CH3v = %d\tCH3t = %d\t\r\n", sensors[2].threshold, sensors[2].value);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)txBuf, strlen(txBuf), HAL_MAX_DELAY);
//	  snprintf (txBuf, TXBUFLEN, "CH4v = %d\tCH4t = %d\t\r\n", sensors[3].threshold, sensors[3].value);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)txBuf, strlen(txBuf), HAL_MAX_DELAY);
//	  if (sensors[1].value > sensors[1].threshold) {
//		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
//	  } else {
//		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
//	  }

//	  //wsad - obsluga
//	  buffer[0] = 0;
//	  HAL_UART_Receive(&huart2, buffer, 20, 1);
//	  if (buffer[0] == 'w') {
//		  jedz_przod();
//	  }
//	  else if (buffer[0] == 's') {
//		  jedz_tyl();
//	  }
//	  else if (buffer[0] == 'a') {
//		  skrec_lewo();
//	  }
//	  else if (buffer[0] == 'd') {
//		  skrec_prawo();
//	  }
//	  else if (buffer[0] == 'h') {
//	 		  hamuj();
//	  }



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 625-100;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 100;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 625-100;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1A_Pin|led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : A1A_Pin led_Pin */
  GPIO_InitStruct.Pin = A1A_Pin|led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallBack(ADC_HandleTypeDef *hadc)
{
	adcConversionComplete = 1;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
